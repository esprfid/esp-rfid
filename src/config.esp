bool ICACHE_FLASH_ATTR loadConfiguration() {
	File configFile = SPIFFS.open("/config.json", "r");
	if (!configFile) {
#ifdef DEBUG
		Serial.println(F("[ WARN ] Failed to open config file"));
#endif
		return false;
	}
	size_t size = configFile.size();
	std::unique_ptr<char[]> buf(new char[size]);
	configFile.readBytes(buf.get(), size);
	DynamicJsonBuffer jsonBuffer;
	JsonObject &json = jsonBuffer.parseObject(buf.get());
	if (!json.success()) {
#ifdef DEBUG
		Serial.println(F("[ WARN ] Failed to parse config file"));
#endif
		return false;
	}
#ifdef DEBUG
	Serial.println(F("[ INFO ] Config file found"));
	json.prettyPrintTo(Serial);
	Serial.println();
#endif
	JsonObject &network = json["network"];
	JsonObject &hardware = json["hardware"];
	JsonObject &general = json["general"];
	JsonObject &mqtt = json["mqtt"];
	JsonObject &ntp = json["ntp"];
#ifdef DEBUG
	Serial.println(F("[ INFO ] Trying to setup RFID Hardware"));
#endif
#ifdef OFFICIALBOARD
	setupWiegandReader(5, 4);
#endif
#ifndef OFFICIALBOARD
	readerType = hardware["readerType"];
	if (readerType == 1) {
		int wgd0pin = hardware["wgd0pin"];
		int wgd1pin = hardware["wgd1pin"];
		setupWiegandReader(wgd0pin, wgd1pin); // also some other settings like weather to use keypad or not, LED pin, BUZZER pin, Wiegand 26/34 version
	} else if (readerType == 0) {
		rfidss = 15;
		if (hardware.containsKey("sspin")) {
			rfidss = hardware["sspin"];
		}
		int rfidgain = hardware["rfidgain"];
		setupMFRC522Reader(rfidss, rfidgain);
	} else if (readerType == 2) {
		rfidss = hardware["sspin"];
		setupPN532Reader(rfidss);
	} else if (readerType == 3) {
		int rxpin = hardware["rxpin"];
		setupRdm6300Reader(rxpin);
	}
#endif
	autoRestartIntervalSeconds = general["restart"];
	wifiTimeout = network["offtime"];
	const char *bssidmac = network["bssid"];
	byte bssid[6];
	parseBytes(bssidmac, ':', bssid, 6, 16);
	deviceHostname = strdup(general["hostnm"]);
	WiFi.hostname(deviceHostname);
	if (!MDNS.begin(deviceHostname)) {
#ifdef DEBUG
		Serial.println("[ WARN ]Error setting up MDNS responder!");
#endif
	}
	MDNS.addService("http", "tcp", 80);
	const char *ntpserver = ntp["server"];
	int ntpinter = ntp["interval"];
	timeZone = ntp["timezone"];
	activateTime = hardware["rtime"];
	relayType = hardware["rtype"];
#ifndef OFFICIALBOARD
	relayPin = hardware["rpin"];
	pinMode(relayPin, OUTPUT);
	digitalWrite(relayPin, relayType);
#endif
	const char *ssid = network["ssid"];
	const char *password = network["pswd"];
	int wmode = network["wmode"];
	http_pass = strdup(general["pswd"]);
	ws.setAuthentication("admin", http_pass);
	if (wmode == 1) {
		int hid = network["hide"];
#ifdef DEBUG
		Serial.println(F("[ INFO ] ESP-RFID is running in AP Mode "));
#endif
		return startAP(hid, ssid, password);
	} else {
		if (network["dhcp"] == "0") {
			WiFi.mode(WIFI_STA);
			const char *clientipch = network["ip"];
			const char *subnetch = network["subnet"];
			const char *gatewaych = network["gateway"];
			const char *dnsch = network["dns"];
			IPAddress clientip;
			IPAddress subnet;
			IPAddress gateway;
			IPAddress dns;
			clientip.fromString(clientipch);
			subnet.fromString(subnetch);
			gateway.fromString(gatewaych);
			dns.fromString(dnsch);
			WiFi.config(clientip, gateway, subnet, dns);
		}
		if (!connectSTA(ssid, password, bssid)) {
			return false;
		}
	}
#ifdef DEBUG
	Serial.println("[ INFO ] Trying to setup NTP Server");
#endif
	IPAddress timeserverip;
	WiFi.hostByName(ntpserver, timeserverip);
	String ip = printIP(timeserverip);
	writeEvent("INFO", "ntp", "Connecting NTP Server", ip);
	NTP.Ntp(ntpserver, timeZone, ntpinter * 60);
	mhs = strdup(mqtt["host"]);
	mport = mqtt["port"];
	const char *muser;
	const char *mpas;
	String muserString = mqtt["user"];
	muser = strdup(muserString.c_str());
	String mpasString = mqtt["pswd"];
	mpas = strdup(mpasString.c_str());
	mqttenabled = mqtt["enabled"];
	if (mqttenabled == 1) {
#ifdef DEBUG
		Serial.println("[ INFO ] Trying to setup MQTT");
#endif
		mqttTopic = strdup(mqtt["topic"]);
		mqttClient.setServer(mhs, mport);
		mqttClient.setCredentials(muser, mpas);
		mqttClient.onDisconnect(onMqttDisconnect);
		mqttClient.onPublish(onMqttPublish);
		mqttClient.onConnect(onMqttConnect);
#ifdef DEBUG
		Serial.println("[ INFO ] try to call mqttconnect ");
#endif
		connectToMqtt();
	}
#ifdef DEBUG
	Serial.println(F("[ INFO ] Configuration done."));
#endif
	return true;
}