void extern mqttPublishEvent(JsonDocument *root);

void ICACHE_FLASH_ATTR writeEvent(String type, String src, String desc, String data)
{
    DynamicJsonDocument root(512);

    root["type"] = type;
    root["src"] = src;
    root["desc"] = desc;
    root["data"] = data;
    root["time"] = now();
    if (config.mqttEvents && config.mqttEnabled) { // log to MQTT
        root["cmd"] = "event";
        root["hostname"] = config.deviceHostname;
        mqttPublishEvent(&root);
    } else { // log to file
        File eventlog = SPIFFS.open("/eventlog.json", "a");
        serializeJson(root, eventlog);
        eventlog.print("\n");
        eventlog.close();
    }
#ifdef DEBUG
    Serial.println("[ " + type + " ] " + src + " | " + desc + " | " + data);
#endif
}

void ICACHE_FLASH_ATTR writeLatest(String uid, String username, int acctype)
{
    DynamicJsonDocument root(512);

    root["uid"] = uid;
    root["username"] = username;
    root["acctype"] = acctype;
    root["timestamp"] = now();
    File latestlog = SPIFFS.open("/latestlog.json", "a");

    serializeJson(root, latestlog);
    latestlog.print("\n");
    latestlog.close();
}

size_t lastPos; // position counter for fast seek
#define LOGTYPE_LATESTLOG 0
#define LOGTYPE_EVENTLOG 1
#define ITEMS_PER_PAGE 10
#define FILES_PER_PAGE 10.0
#define MIN_SPIFF_BYTES 4096

void ICACHE_FLASH_ATTR sendLogFile(int page, String fileName, int logFileType)
{
    // if we are reading the first page then we reset
    // the position counter

    if (page == 1) {
        lastPos = 0;
    }
    float pages;

    DynamicJsonDocument root(2048);

    if (logFileType == LOGTYPE_EVENTLOG) {
        root["command"] = "eventlist";
    }
    if (logFileType == LOGTYPE_LATESTLOG) {
        root["command"] = "latestlist";
    }
    root["page"] = page;
    JsonArray items = root.createNestedArray("list");

    File logFile;

    if (!SPIFFS.exists(fileName)) {
        logFile = SPIFFS.open(fileName, "w");
        logFile.close();
    }

    logFile = SPIFFS.open(fileName, "r");

    // move the file pointer to the last known position

    logFile.seek(lastPos);
    int numLines = 0;

    // read in 10 lines or until EOF whatever happens first

    while (logFile.available() && (numLines < ITEMS_PER_PAGE)) {
        String item = String();
        item = logFile.readStringUntil('\n');
        items.add(item);
        numLines++;
    }

    // remember the last position

    lastPos = logFile.position();

    // calculate the number of remaining pages

    if (logFile.available()) { // tell bootstrap footable on the client side that there are more pages to come
        float bytesPerPageRoughly = (lastPos / page);
        float totalPagesRoughly = logFile.size() / bytesPerPageRoughly;
        pages = totalPagesRoughly <= page ? page + 1 : totalPagesRoughly;
    } else {
        pages = page; // this was the last page
    }
    logFile.close();
    root["haspages"] = ceil(pages);
    size_t len = measureJson(root);
    AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);

    if (buffer) {
        serializeJson(root, (char *)buffer->get(), len + 1);
        ws.textAll(buffer);
        if (logFileType == LOGTYPE_EVENTLOG) {
            ws.textAll("{\"command\":\"result\",\"resultof\":\"eventlist\",\"result\": true}");
        }
        if (logFileType == LOGTYPE_LATESTLOG) {
            ws.textAll("{\"command\":\"result\",\"resultof\":\"latestlist\",\"result\": true}");
        }
    }
}

void ICACHE_FLASH_ATTR logMaintenance(String action, String filename)
{
#ifdef DEBUG
    Serial.printf("[DEBUG] Log Maintenance Action: %s on %s\n", action.c_str(), filename.c_str());
#endif

    // delete a file

    if (action == "delete") {
        SPIFFS.remove(filename);
    }

    // rollover a file, i.e. rename

    if (action == "rollover") {
        size_t rolloverExtension = 1;
        while (SPIFFS.exists(filename + "." + rolloverExtension)) {
            rolloverExtension++;
        }
        SPIFFS.rename(filename, filename + "." + rolloverExtension);
    }

    // split a file, i.e. create two new files of roughly the same size
    // or at least as big as SPIFFS free space allows

    if (action == "split") {
        size_t rolloverExtension1 = 1;
        while (SPIFFS.exists(filename + ".split." + rolloverExtension1)) {
            rolloverExtension1++;
        }
        size_t rolloverExtension2 = rolloverExtension1 + 1;
        while (SPIFFS.exists(filename + ".split." + rolloverExtension2)) {
            rolloverExtension2++;
        }

        File logFile = SPIFFS.open(filename, "r");
        File newFile1 = SPIFFS.open(filename + ".split." + rolloverExtension1, "w");
        File newFile2 = SPIFFS.open(filename + ".split." + rolloverExtension2, "w");

        FSInfo fs_info;
        SPIFFS.info(fs_info);

        size_t truncatePosition = logFile.size() / 2;
        logFile.seek(truncatePosition);
        logFile.readStringUntil('\n');
        truncatePosition = logFile.position();
        logFile.seek(0);

        // check if we have enough space for the split operation

        if ((fs_info.totalBytes - fs_info.usedBytes) < (logFile.size() + MIN_SPIFF_BYTES)) {
            ws.textAll(
                "{\"command\":\"result\",\"resultof\":\"logfileMaintenance\",\"result\": false,\"message\":\"Not enough space on SPIFF Filesystem\"}");
        } else {
            // mind the watchdog timer - this may take a couple of seconds...

            ESP.wdtDisable();
            ESP.wdtEnable(1500);

            // read the first half of the file

            while (logFile.available() && logFile.position() < truncatePosition) {
                String item = String();
                item = logFile.readStringUntil('\n');
                newFile1.println(item);
                ESP.wdtFeed(); // tell the watchdog we're still doing stuff
            }

            // read the rest

            while (logFile.available()) {
                String item = String();
                item = logFile.readStringUntil('\n');
                newFile2.println(item);
                ESP.wdtFeed(); // no reset please ;-)
            }

            logFile.close();
            newFile1.close();
            newFile2.close();
        }
    }

    ESP.wdtEnable(5000);
    ws.textAll("{\"command\":\"result\",\"resultof\":\"logfileMaintenance\",\"result\": true}");
}

void ICACHE_FLASH_ATTR sendFileList(int page)
{
    DynamicJsonDocument root(512);

    root["command"] = "listfiles";
    root["page"] = page;
    JsonArray items = root.createNestedArray("list");

    size_t first = (page - 1) * FILES_PER_PAGE;
    size_t last = page * FILES_PER_PAGE;
    size_t numFiles = 0;

    Dir dir = SPIFFS.openDir("/");

    while (dir.next()) {
        //	if (dir.isFile()) // isFile is implemented in Arduino Core 2.5.1 - We'll have to wait for the ISR not in IRAM fix

        String thisFileName = dir.fileName();
        if ((thisFileName.indexOf("latestlog") >= 0) || (thisFileName.indexOf("eventlog") >= 0)) { // for the time being we just check filenames
            if (numFiles >= first && numFiles < last) {
                JsonObject item = items.createNestedObject();
                item["filename"] = dir.fileName();
                item["filesize"] = dir.fileSize();
            }   // first, last
            numFiles++;
        }       // isFile
    }           // dir next

    float pages = numFiles / FILES_PER_PAGE;

    root["haspages"] = ceil(pages);

    size_t len = measureJson(root);
    AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);

    if (buffer) {
        serializeJson(root, (char *)buffer->get(), len + 1);
        ws.textAll(buffer);
        ws.textAll("{\"command\":\"result\",\"resultof\":\"listfiles\",\"result\": true}");
    }
}

void ICACHE_FLASH_ATTR sendEventLog(int page, String fileName)
{
    if (fileName.length() == 0) {
        fileName = "/eventlog.json";
    }
    sendLogFile(page, fileName, LOGTYPE_EVENTLOG);
}

void ICACHE_FLASH_ATTR sendLatestLog(int page, String fileName)
{
    if (fileName.length() == 0) {
        fileName = "/latestlog.json";
    }
    sendLogFile(page, fileName, LOGTYPE_LATESTLOG);
}
