void setEnableWifi()
{
    doEnableWifi = true;
}

void onWifiDisconnect(const WiFiEventStationModeDisconnected &event)
{
#ifdef DEBUG
    Serial.println(F("[ INFO ] WiFi STA Disconnected"));
#endif
    mqttReconnectTimer.detach();
    if (!wifiReconnectTimer.active() && !config.fallbackMode) {
        wifiReconnectTimer.once(300, setEnableWifi);
    }
    ledWifiOff();
}

void onWifiGotIP(const WiFiEventStationModeGotIP &event)
{
#ifdef DEBUG
    Serial.println("[ INFO ] WiFi IP Connected");
#endif
    wifiReconnectTimer.detach();
    ledWifiOn();
}

bool ICACHE_FLASH_ATTR startAP(IPAddress apip, IPAddress apsubnet, bool hidden, const char *ssid,
                               const char *password = NULL)
{
#ifdef DEBUG
    Serial.println(F("[ INFO ] ESP-RFID is running in AP Mode "));
#endif
    WiFi.mode(WIFI_AP);
#ifdef DEBUG
    Serial.print(F("[ INFO ] Configuring access point... "));
#endif

    WiFi.softAPConfig(apip, apip, apsubnet);

    bool success;
    if (hidden) {
        success = WiFi.softAP(ssid, password, 3, true);
    } else {
        success = WiFi.softAP(ssid, password);
    }
#ifdef DEBUG
    Serial.println(success ? F("Ready") : F("Failed!"));
#endif

    if (success) {
        ledWifiOn();
    }

#ifdef DEBUG
    IPAddress myIP = WiFi.softAPIP();

    Serial.print(F("[ INFO ] AP IP address: "));
    Serial.println(myIP);
    Serial.printf("[ INFO ] AP SSID: %s\n", ssid);
#endif
    return success;
}

// Fallback to AP Mode, so we can connect to ESP if there is no Internet connection
void ICACHE_FLASH_ATTR fallbacktoAPMode()
{
    config.accessPointMode = true;
#ifdef DEBUG
    Serial.println(F("[ INFO ] ESP-RFID is running in Fallback AP Mode"));
#endif
    WiFi.mode(WIFI_AP);
    uint8_t macAddr[6];
    WiFi.softAPmacAddress(macAddr);
    char ssid[15];
    sprintf(ssid, "ESP-RFID-%02x%02x%02x", macAddr[3], macAddr[4], macAddr[5]);
    if (WiFi.softAP(ssid)) {
        ledWifiOn();
    }
}

// Try to connect Wi-Fi
bool ICACHE_FLASH_ATTR connectSTA(const char *ssid, const char *password, byte bssid[6])
{
    bool useBSSID = false;

    WiFi.mode(WIFI_STA);
    WiFi.persistent(false);

    if (!config.dhcpEnabled) {
        WiFi.config(config.ipAddress, config.gatewayIp, config.subnetIp, config.dnsIp);
    }
#ifdef DEBUG
    Serial.print(F("[ INFO ] Trying to connect WiFi: "));
    Serial.println(ssid);
    Serial.print(F("[ INFO ] WiFi BSSID: "));
#endif
    for (int i = 0; i < 6; i++) {
#ifdef DEBUG
        Serial.print(bssid[i]);
        if (i < 5) {
            Serial.print(F(":"));
        } else {
            Serial.println();
        }
#endif
        if (bssid[i] != 0) {
            useBSSID = true;
        }
    }
    if (useBSSID) {
#ifdef DEBUG
        Serial.println(F("[ INFO ] BSSID locked"));
#endif
        WiFi.begin(ssid, password, 0, bssid);
    } else {
#ifdef DEBUG
        Serial.println(F("[ INFO ] any BSSID"));
#endif
        WiFi.begin(ssid, password);
    }
    unsigned long now = millis();
    uint8_t timeout = 15; // define when to time out in seconds
    do{
        ledWifiStatus();
        delay(500);
#ifdef DEBUG
        if (!WiFi.isConnected()) {
            Serial.print(F("."));
        }
#endif
        if (WiFi.isConnected()) {
            break;
        }
    } while (millis() - now < timeout * 1000);

    // We now out of the while loop, either time is out or we connected. check what happened
    if (WiFi.isConnected()) {
        String data = ssid;
        data += " " + WiFi.localIP().toString();
        writeEvent("INFO", "wifi", "WiFi is connected", data);
        Serial.println("[ INFO ] Trying to setup NTP Server");
        NTP.Ntp(config.ntpServer, config.timeZone, config.ntpInterval * 60);
        connectToMqtt();
        return true;
    } else {
#ifdef DEBUG
        Serial.println();
        Serial.println(F("[ WARN ] Couldn't connect in time"));
#endif
        if (!config.fallbackMode) {
            wifiReconnectTimer.once(300, setEnableWifi);
        }
        return false;
    }
}

void ICACHE_FLASH_ATTR disableWifi()
{
    wiFiUptimeMillis = 0;
    WiFi.disconnect(true);
    WiFi.softAPdisconnect(true);
#ifdef DEBUG
    Serial.println(F("Turn wifi off."));
#endif
}

void ICACHE_FLASH_ATTR enableWifi()
{
    wiFiUptimeMillis = 0;
    if (config.accessPointMode) {
        startAP(config.accessPointIp, config.accessPointSubnetIp, config.networkHidden, config.ssid,
                config.wifiPassword);
    } else {
        bool connected = connectSTA(config.ssid, config.wifiPassword, config.bssid);
        if (!connected && config.fallbackMode) {
            fallbacktoAPMode();
        }
    }
}

void setupWifi(bool configured)
{
    if (!configured) {
        WiFi.hostname("esp-rfid");
        fallbacktoAPMode();
    } else {
        wifiDisconnectHandler = WiFi.onStationModeDisconnected(onWifiDisconnect);
        wifiOnStationModeGotIPHandler = WiFi.onStationModeGotIP(onWifiGotIP);
        WiFi.hostname(config.deviceHostname);
        enableWifi();
    }
}
