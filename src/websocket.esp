#define MAX_WS_BUFFER 2048

char wsBuffer[MAX_WS_BUFFER];

struct WsMessage
{
	char *serializedMessage;
	AsyncWebSocketClient *client;
	WsMessage *nextMessage = NULL;
};

WsMessage *wsMessageQueue = NULL;

// messageSize needs to be one char bigger than the string to contain the string terminator
void addWsMessageToQueue(AsyncWebSocketClient *client, int messageSize)
{
	WsMessage *incomingMessage = new WsMessage;
	incomingMessage->serializedMessage = (char *)malloc(messageSize);
	strlcpy(incomingMessage->serializedMessage, (const char *)client->_tempObject, messageSize);
	free(client->_tempObject);
	client->_tempObject = NULL;

	incomingMessage->client = client;

	WsMessage *lastMessage = wsMessageQueue;
	// process only one message at the time
	if (lastMessage == NULL)
	{
		wsMessageQueue = incomingMessage;
	}
	else
	{
		while (lastMessage->nextMessage != NULL)
		{
			lastMessage = lastMessage->nextMessage;
		}
		lastMessage->nextMessage = incomingMessage;
	}
}

void ICACHE_FLASH_ATTR processWsMessage(WsMessage *incomingMessage)
{
	// We should always get a JSON object (stringfied) from browser, so parse it
	DynamicJsonDocument root(2448);
	AsyncWebSocketClient *client = incomingMessage->client;
	// cast to const char * to avoid in-place editing of serializedMessage
	auto error = deserializeJson(root, (const char *)incomingMessage->serializedMessage);

	if (error)
	{
#ifdef DEBUG
		Serial.println(F("[ WARN ] Couldn't parse WebSocket message"));
#endif
		free(incomingMessage->serializedMessage);
		free(incomingMessage);
		return;
	}
	// Web Browser sends some commands, check which command is given
	const char *command = root["command"];
	// Check whatever the command is and act accordingly
	if (strcmp(command, "remove") == 0)
	{
		const char *uid = root["uid"];
		String filename = "/P/";
		filename += uid;
		SPIFFS.remove(filename);
		ws.textAll("{\"command\":\"result\",\"resultof\":\"remove\",\"result\": true}");
	}
	else if (strcmp(command, "configfile") == 0)
	{
		File f = SPIFFS.open("/config.json", "w");
		if (f)
		{
			size_t len = 0;
			while (incomingMessage->serializedMessage[len] != '\0' && len < MAX_WS_BUFFER)
			{
				len++;
			}
			f.write(incomingMessage->serializedMessage, len);
			f.close();
			shouldReboot = true;
			writeEvent("INFO", "sys", "Config stored in the SPIFFS", String(len) + " bytes");
		}
	}
	else if (strcmp(command, "userlist") == 0)
	{
		int page = root["page"];
		sendUserList(page, incomingMessage->client);
	}
	else if (strcmp(command, "status") == 0)
	{
		sendStatus(client);
	}
	else if (strcmp(command, "restart") == 0)
	{
		shouldReboot = true;
	}
	else if (strcmp(command, "destroy") == 0)
	{
		formatreq = true;
	}
	else if (strcmp(command, "geteventlog") == 0)
	{
		int page = root["page"];
		const char *xfileName = root["filename"];
		sendEventLog(page, xfileName, client);
	}
	else if (strcmp(command, "getlatestlog") == 0)
	{
		int page = root["page"];
		const char *xfileName = root["filename"];
		sendLatestLog(page, xfileName, client);
	}
	else if (strcmp(command, "listfiles") == 0)
	{
		int page = root["page"];
		sendFileList(page, client);
	}
	else if (strcmp(command, "logMaintenance") == 0)
	{
		logMaintenance(root["action"],root["filename"], client);
	}
	else if (strcmp(command, "clearevent") == 0)
	{
		SPIFFS.remove("/eventlog.json");
		writeEvent("WARN", "sys", "Event log cleared!", "");
	}
	else if (strcmp(command, "clearlatest") == 0)
	{
		SPIFFS.remove("/latestlog.json");
		writeEvent("WARN", "sys", "Latest Access log cleared!", "");
	}
	else if (strcmp(command, "userfile") == 0)
	{
#ifdef DEBUG
		Serial.println(F("[ DEBUG ] userfile received"));
		serializeJson(root, Serial);
#endif
		const char *uid = root["uid"];
		String filename = "/P/";
		filename += uid;
		File f = SPIFFS.open(filename, "w+");
		// Check if we created the file
		if (f)
		{
			serializeJson(root, f);
#ifdef DEBUG
		Serial.println(F("[ DEBUG ] userfile saved"));
#endif
		}
		f.close();
		client->text("{\"command\":\"result\",\"resultof\":\"userfile\",\"result\": true}");
	}
	else if (strcmp(command, "testrelay1") == 0)
	{
		activateRelay[0] = true;
		previousMillis = millis();
		client->text("{\"command\":\"giveAccess\"}");
	}
	else if (strcmp(command, "testrelay2") == 0)
	{
		activateRelay[1] = true;
		previousMillis = millis();
		client->text("{\"command\":\"giveAccess\"}");
	}
	else if (strcmp(command, "testrelay3") == 0)
	{
		activateRelay[2] = true;
		previousMillis = millis();
		client->text("{\"command\":\"giveAccess\"}");
	}
	else if (strcmp(command, "testrelay4") == 0)
	{
		activateRelay[3] = true;
		previousMillis = millis();
		client->text("{\"command\":\"giveAccess\"}");
	}
	else if (strcmp(command, "scan") == 0)
	{
		WiFi.scanNetworksAsync(printScanResult, true);
	}
	else if (strcmp(command, "gettime") == 0)
	{
		sendTime(client);
	}
	else if (strcmp(command, "settime") == 0)
	{
		time_t t = root["epoch"];
		epoch = t;
		sendTime(client);
	}
	else if (strcmp(command, "getconf") == 0)
	{
		File configFile = SPIFFS.open("/config.json", "r");
		if (configFile)
		{
			size_t len = configFile.size();
			AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len); //  creates a buffer (len + 1) for you.
			if (buffer)
			{
				configFile.readBytes((char *)buffer->get(), len + 1);
				client->text(buffer);
			}
			configFile.close();
		}
	}
	free(incomingMessage->serializedMessage);
	free(incomingMessage);
	yield();
}

// Handles WebSocket Events
void ICACHE_FLASH_ATTR onWsEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{
	if (type == WS_EVT_ERROR)
	{
#ifdef DEBUG
		Serial.printf("[ WARN ] WebSocket[%s][%u] error(%u): %s\r\n", server->url(), client->id(), *((uint16_t *)arg), (char *)data);
#endif
	}
	else if (type == WS_EVT_DATA)
	{
		AwsFrameInfo *info = (AwsFrameInfo *)arg;
		if (info->final && info->index == 0 && info->len == len)
		{
			//the whole message is in a single frame and we got all of it's data
			client->_tempObject = malloc(info->len);
			memcpy((uint8_t *)(client->_tempObject), data, len);
			addWsMessageToQueue(client, info->len + 1);
		}
		else
		{
			//message is comprised of multiple frames or the frame is split into multiple packets
			if (info->index == 0)
			{
				if (info->num == 0 && client->_tempObject == NULL)
				{
					client->_tempObject = malloc(info->len);
				}
			}
			if (client->_tempObject != NULL)
			{
				memcpy((uint8_t *)(client->_tempObject) + info->index, data, len);
			}
			if ((info->index + len) == info->len)
			{
				if (info->final)
				{
					addWsMessageToQueue(client, info->len + 1);
				}
			}
		}
	}
}

void processWsQueue()
{
	while (wsMessageQueue != NULL)
	{
		WsMessage *messageToProcess = wsMessageQueue;
		wsMessageQueue = messageToProcess->nextMessage;
		processWsMessage(messageToProcess);
	}
}
